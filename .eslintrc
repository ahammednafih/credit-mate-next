{
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },
  "extends": ["next", "prettier", "plugin:json/recommended"],
  "plugins": ["json", "unused-imports", "import", "react"],
  "overrides": [
    {
      // 3) Now we enable eslint-plugin-testing-library rules or preset only for matching testing files!
      "files": [
        "**/__tests__/**/*.[jt]s?(x)",
        "**/?(*.)+(spec|test).[jt]s?(x)"
      ],
      "extends": ["plugin:testing-library/react"]
    },
    {
      "files": [
        "**/__tests__/**/*.[jt]s?(x)",
        "**/?(*.)+(spec|test).[jt]s?(x)"
      ],
      "plugins": ["jest"],
      "extends": ["plugin:jest/recommended"],
      "rules": { "jest/prefer-expect-assertions": "off" }
    }
  ],
  "rules": {
    "react/jsx-boolean-value": "error",
    "react/jsx-no-useless-fragment": "error",
    "react/jsx-sort-props": [
      "error",
      {
        "callbacksLast": true,
        "shorthandFirst": true
      }
    ],
    "react/jsx-newline": ["error", { "prevent": true }],
    "react/prop-types": ["error", { "ignore": ["children"] }],
    "import/no-anonymous-default-export": "off",
    "no-console": [
      "warn",
      {
        "allow": ["error"]
      }
    ],
    "no-unused-vars": [
      "error",
      {
        "args": "all",
        "argsIgnorePattern": "^_",
        "destructuredArrayIgnorePattern": "^_",
        "caughtErrors": "all"
      }
    ],
    // not-auto-fixable: No undefined variables allowed.
    "no-undef": "error",
    // not-auto-fixable: require `return` statements to either always or never specify values.
    "consistent-return": "error",
    // auto-fixable: sadly this doesn't support guard clauses yet.
    "padding-line-between-statements": [
      "error",
      { "blankLine": "always", "prev": "if", "next": ["if", "return"] },
      // The newline-before-return rule is deprecated in favor of the following:
      { "blankLine": "always", "prev": "*", "next": "return" },
      // Add newline between function declarations
      {
        "blankLine": "always",
        "prev": [
          "block",
          "multiline-block-like",
          "function",
          "iife",
          "multiline-const",
          "multiline-expression"
        ],
        "next": ["function", "iife", "multiline-const", "multiline-expression"]
      }
    ],
    // auto-fixable: Single line statements needn't have any braces. But in all other cases enforce curly braces.
    "curly": ["error", "multi-line"],
    // auto-fixable: Remove the else part, if the "if" or "else-if" chain has a return statement
    "no-else-return": "error",
    "comma-dangle": [
      "error",
      {
        "arrays": "always-multiline",
        "objects": "always-multiline",
        "imports": "always-multiline",
        "exports": "always-multiline",
        "functions": "never"
      }
    ],
    // auto-fixable: If a variable is never reassigned, using the const declaration is better.
    "prefer-const": "error",
    // auto-fixable: It is considered good practice to use the type-safe equality operators === and !==.
    "eqeqeq": "error",
    // not-auto-fixable: Rule flags optional chaining expressions in positions where short-circuiting to undefined causes throwing a TypeError afterward.
    "no-unsafe-optional-chaining": "error",
    // auto-fixable: Remove all unused imports.
    "unused-imports/no-unused-imports": "error",
    // auto-fixable-1-level-deep: Using nested ternary operators make the code unreadable. Use if/else or switch with if/else. If it's JSX then move it out into a function or a variable. It's fine to use nestedTernary in JSX when it makes code more readable.
    "no-nested-ternary": "warn",
    // auto-fixable: Enforces no braces where they can be omitted.
    "arrow-body-style": ["error", "as-needed"],
    // auto-fixable: Suggests using template literals instead of string concatenation.
    "prefer-template": "error",
    // auto-fixable: Disallows ternary operators when simpler alternatives exist.
    "no-unneeded-ternary": ["error", { "defaultAssignment": false }],
    // auto-fixable: Partially fixable. Prefer {x} over {x: x}.
    "object-shorthand": [
      "error",
      "always",
      { "avoidQuotes": true, "ignoreConstructors": true }
    ],
    // auto-fixable: Partially fixable. Unless there's a need to the this keyword, there's no advantage of using a plain function.
    "prefer-arrow-callback": ["error", { "allowUnboundThis": true }],
    // not-auto-fixable: Convert multiple imports from same module into a single import.
    "no-duplicate-imports": ["error", { "includeExports": true }],
    // auto-fixable: Partially fixable. In JavaScript, there are a lot of different ways to convert value types. Allow only readable coercions.
    "no-implicit-coercion": ["error", { "allow": ["!!"] }],
    // auto-fixable: Require let or const instead of var.
    "no-var": "error",
    "import/order": [
      "error",
      {
        "groups": ["builtin", "external", "internal"],
        "pathGroups": [
          {
            "pattern": "react",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "@/components/**",
            "group": "internal",
            "position": "before"
          },
          { "pattern": "@/**", "group": "internal" }
        ],
        "pathGroupsExcludedImportTypes": ["react"],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ]
  }
}
